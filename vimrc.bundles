filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let vundle manage Vundle
Plugin 'gmarik/vundle'

" Define bundles via Github repos
Plugin 'vim-scripts/matchit.zip'
Plugin 'scrooloose/nerdtree' " leader n to show dir tree
Plugin 'jeetsukumaran/vim-buffergator' " leader b to show buffer list
Plugin 'kien/ctrlp.vim' " fuzzy file search
Plugin 'tpope/vim-fugitive' " git plugin
Plugin 'sjl/gundo.vim' " undo tree browser
Plugin 'jiangmiao/auto-pairs' " autcomplete braces etc.
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'goldfeld/vim-seek' " in nmode: s xx to jumo to 2 chars
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'vim-scripts/ZoomWin' " ctrl w o to zoom win
Plugin 'ddollar/nerdcommenter' " leader , to comment in v mode
Plugin 'terryma/vim-multiple-cursors' " ctrl n to add cursor (ctrl p and ctrl x)
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/syntastic' " syntax check on save, options below
Plugin 'lfilho/cosco.vim' " semicolon insertion with leader ; in imode and nmode

" evaluate
Plugin 'marijnh/tern_for_vim'

" replace with YouCompleteMe?
Plugin 'ervandew/supertab' " autocomplete from all open buffers

" never realy used these, nuked for now
" Plugin 'tpope/vim-unimpaired'
" Plugin 'majutsushi/tagbar'
" Plugin 'rking/ag.vim'
"
" might not need these anymoar?
" Plugin 'benmills/vimux'
" Plugin 'skalnik/vim-vroom' " test runner
" Plugin 'jeffkreeftmeijer/vim-numbertoggle' " relative line numbers based on mode

Plugin 'kana/vim-textobj-user' " dependency for vim-textobj-rubyblock
Plugin 'michaeljsmith/vim-indent-object' " select based on indent vai, vii

" ruby plugins
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-rails'

Plugin 'skwp/vim-rspec'
Plugin 'sunaku/vim-ruby-minitest'
" probably not using this enough to include it
" Plugin 'nelstrom/vim-textobj-rubyblock'

" activate if needed, usually not writing vanilla html
Plugin 'mattn/emmet-vim' " <C-V>, for lighting fast html coding

" editorconfig the guys are using is rubbish atm...
" Plugin 'editorconfig/editorconfig-vim'

" Add languages plugins
Plugin 'othree/html5.vim'
Plugin 'tpope/vim-git'
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'moll/vim-node'
Plugin 'mxw/vim-jsx'
Plugin 'kchmck/vim-coffee-script'
Plugin 'rust-lang/rust.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'heartsentwined/vim-emblem'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-haml'
Plugin 'slim-template/vim-slim'
Plugin 'AndrewRadev/vim-eco'
Plugin 'wavded/vim-stylus'
Plugin 'StanAngeloff/php.vim'
Plugin 'tpope/vim-markdown'
Plugin 'timcharper/textile.vim'
" Plugin 'chrisbra/csv.vim' " looks ugly
" Plugin 'webgefrickel/vim-typoscript' " dont need this anymore, ts sucks

" Check if this is realy needed
Plugin 'cakebaker/scss-syntax.vim'

" only enable when needed
" Plugin 'guns/xterm-color-table.vim'

" Colorschemes
Plugin 'jpdombrowski/xoria256.vim'
" Plugin 'jdkanani/vim-material-theme'
" Plugin 'cschlueter/vim-mustang'
" Plugin 'goatslacker/mango.vim'
" Plugin 'jonathanfilip/vim-lucius'
" Plugin 'chriskempson/vim-tomorrow-theme'
" Plugin 'w0ng/vim-hybrid'
" Plugin 'nanotech/jellybeans.vim'
" Plugin 'jgdavey/vim-railscasts'

" Plugin Settings

" Gundo config (undo tree)
nnoremap <F5> :GundoToggle<CR>
let g:gundo_right = 1
let g:gundo_preview_bottom = 1
let g:gundo_close_on_revert = 1

" Cosco config (semicolon insertion)
autocmd FileType javascript,javascript.jsx,c nnoremap <silent> <Leader>; :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,javascript.jsx,c inoremap <silent> <Leader>; <c-o>:call cosco#commaOrSemiColon()<CR><Esc>

" Emmet config
let g:user_emmet_install_global = 0
autocmd FileType html,eruby,handlebars EmmetInstall

" UltiSnops config
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsEnableSnipMate=0 " don't look for Snipmate snippets

let g:syntastic_enable_signs=1
let g:syntastic_check_on_open=1
" let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_mode_map = {
  \ 'mode': 'passive',
  \ 'active_filetypes': ['ruby, javascript'],
  \ 'passive_filetypes': [] }

let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']

" let g:vroom_use_vimux = 1
" let g:vroom_clear_screen = 0

" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"   \ 'file': '\.png$\|\.PNG$\|\.JPG$\|\.jpg$\|\.GIF$\|\.gif$\|\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
"   \ }

let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif
endfunction
