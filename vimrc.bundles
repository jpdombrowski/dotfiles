filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let vundle manage Vundle
Bundle 'gmarik/vundle'

" Define bundles via Github repos
Bundle 'tsaleh/vim-matchit'
Bundle 'scrooloose/nerdtree'
Bundle 'jeetsukumaran/vim-buffergator'
Bundle 'kien/ctrlp.vim'
Bundle 'rking/ag.vim'
Bundle 'ervandew/supertab'
Bundle 'jiangmiao/auto-pairs'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-endwise'
Bundle 'kana/vim-textobj-user'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'vim-scripts/ZoomWin'
Bundle 'ddollar/nerdcommenter'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'jeffkreeftmeijer/vim-numbertoggle'
Bundle 'majutsushi/tagbar'
Bundle 'benmills/vimux'
Bundle 'skalnik/vim-vroom'
Bundle 'goldfeld/vim-seek'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'mtth/scratch.vim'
Bundle 'moll/vim-node'

" Bundle 'scrooloose/syntastic' " [TODO] fix signs

" Snipmate + dependencies
" Bundle 'MarcWeber/vim-addon-mw-utils'
" Bundle 'tomtom/tlib_vim'
" Bundle 'garbas/vim-snipmate'

" Add languages plugins
Bundle 'kchmck/vim-coffee-script'
Bundle 'chrisbra/csv.vim'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-haml'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'tpope/vim-markdown'
" Bundle 'mmalecki/vim-node.js'
Bundle 'skwp/vim-rspec'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'slim-template/vim-slim'
Bundle 'timcharper/textile.vim'
Bundle 'webgefrickel/vim-typoscript'

" crunch time
" Bundle 'koron/nyancat-vim'

" Custom xoria256 colorscheme
Bundle 'jpdombrowski/xoria256.vim'
" Colorschemes
" Bundle 'w0ng/vim-hybrid'
" Bundle 'nanotech/jellybeans.vim'
" Bundle 'jgdavey/vim-railscasts'

" Plugin Settings
" Syntastic signs don't work atm, although they should...
" let g:syntastic_enable_signs=1
" let g:syntastic_check_on_open=1
" let g:syntastic_quiet_warnings=0
" let g:syntastic_auto_loc_list=2
" let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby, javascript'] }

let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']

let g:vroom_use_vimux = 1
let g:vroom_clear_screen = 0

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\.png$\|\.PNG$\|\.JPG$\|\.jpg$\|\.GIF$\|\.gif$\|\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
  \ }

let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif
endfunction
